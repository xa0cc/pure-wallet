module PureHeartWallet::Box {

    use sui::tx_context::{Self, TxContext};
    use sui::object::{Self, UID};
  //  use sui::string;
  //  use sui::transfer;
    use sui::balance;
    use sui::coin::{Self, Coin};
    use sui::vec_map::{Self, VecMap};
  //  use std::option::{Self, Option};
    use std::signer;
    use std::vector;
    use std::string::{Self, String};
    use std::ascii;
    use std::bcs;
    //use movemate

    const ERR: u64 = 0;
    const MAX_U64: u64 = 18446744073709551615;

    struct Box<T1, T2> has key, store {
        id: UID,
        owner: address,
        content: vector<SubBox<T1, T2>>,
        settings: VecMap<String, vector<String>>
    }
//settings={
//    reserve_list: vector<string>, //vector of reserve addresses
//    password: vector<string>,
//}
    public fun wrap<T1, T2>(ctx: &mut TxContext, owner: address, content: vector<SubBox<T1, T2>>, settings: VecMap<String, vector<String>>): Box<T1, T2> {
        Box {id: object::new(ctx), owner, content, settings}
    }
    // spec wrap {
    //     ensures result.owner == owner && result.content == content;
    // }

    fun access<T1, T2>( account: &signer, box: &mut Box<T1, T2>): (&mut vector<SubBox<T1, T2>>) {
        let Box {id, owner, content, settings } = box;
        assert!(owner == &(signer::address_of(account)), ERR);

        (content)
    }
    
    fun access_sub<T1, T2>(account: &signer, box: &mut Box<T1, T2>, subacc: u64): (&mut SubBox<T1, T2>) {
        let subbox = vector::borrow_mut<SubBox<T>>(access(account, box), subacc);

        (subbox)
    }
   
    public fun unwrap(account: &signer, box: Box): vector<SubBox<T>> {
        let Box {id, owner, content, settings } = box;
        assert!(owner == signer::address_of(account), ERR);

        content
    }
    // spec unwrap {
    //     aborts_if box.owner != signer::address_of(account);
    //     ensures result == box.content;
    // }

    public entry fun unwrap_reserve(account: &signer, box: Box, pwd: String): vector<SubBox<T>> {
        let Box {id, owner, content, settings } = box;
        let reserve_list = vec_map::get<String, vector<String>>(&mut settings, &string::utf8(b"reserve_list"));
        let password = *vector::borrow<String>(vec_map::get<String, vector<String>>(&mut settings, &string::utf8(b"password")), 0);
        assert!(pwd == password, ERR);
        assert!(vector::contains(reserve_list, &string::utf8(bcs::to_bytes(&signer::address_of(account)))), ERR);

        content
    }

    spec module {
        // Never abort, unless explicitly defined so:
        pragma aborts_if_is_strict;
    }

    struct SubBox<phantom T> has key, store {
        //coin types?? discern by types not by symbol??
        coins: VecMap<String, Coin<T>>,
        settings: VecMap<String, vector<String>>,
        journal: Journal,
        limit: VolumeLimit
    }

    // struct TransferLimit has store, drop {
    //     whitelist: vector<address>,
    //     blacklist: vector<address>
    // }

    struct VolumeLimit has store, drop {
        volume_per_address: VecMap<String, u64>, 
        //string or address format for addresses??
        volume_per_coin: VecMap<String, u64>
    }

//trading limits:
//market_list: Vec<string>  - just add market contract adress to whitelist?? or volume !=0
// instead of whitelist/blacklist - set volume limit for address for max/0

    struct Journal has store {
        //     datetime,
        //     coin,
        //     in_out,
            // //  addr: address,
            //   amount: u64,
            //   txid: String,
              id: UID}

// coins: (coin, balance::zero("coin")) for new wallet
    public entry fun wrap_sub<T>(ctx: &mut TxContext, coins: VecMap<String, Coin<T>>, settings: VecMap<String, vector<String>>,limit: VolumeLimit): SubBox<T> {
        let journal = Journal {id: object::new(ctx)};
        SubBox{ coins, settings, limit, journal}
    }

    public fun read_balance<T>(box: &SubBox<T>, coin: String): u64 {
      //  let SubBox { coins } = box;
        let bal =  vec_map::get<String, Coin<T>>(&box.coins, &coin);
        //bal1 = coin::into_balance<T>(bal);

        coin::value<T>(bal)
    }
    
    public entry fun withdraw<T>(box: &mut SubBox, coin: String, to: address, amount: u64, ctx: &mut TxContext) {
       // let SubBox{ coins } = box;
        assert!(coin::value<T>(vec_map::get<String, Coin<T>>(&box.coins, &coin)) >= amount, ERR);
        assert!(amount > fresh_limit_coin(coin, &box.journal, &box.limit), ERR);
        assert!(amount > fresh_limit_address(to, &box.journal, &box.limit), ERR);
        let bal =  vec_map::get_mut<String, Coin<T>>(&mut box.coins, &coin);
        // let bal2 = balance::split(bal, amount);
        // let trans = coin::from_balance(bal2, ctx);
        // transfer::transfer (trans, to)   //separate func?
        coin::split_and_transfer<T>(bal, amount, to, ctx)
    }


    public entry fun internal_transfer<T>(account: &signer, box: &mut Box, coin: String, from: u64, to: u64, amount: u64, ctx: &mut TxContext) {
        let sub1 = access_sub(account, box, from); 
        let sub2 = access_sub(account, box, to);
        assert!(amount > fresh_limit_coin(coin, &sub1.journal, &sub1.limit), ERR);
        assert!(coin::value<Coin>(vec_map::get<String, Coin<T>>(sub1.coins, coin)) > amount, ERR);
        let bal_from =  vec_map::get_mut<String, Coin<T>>(sub1.coins, coin);
        let bal_to =  vec_map::get_mut<String, Coin<T>>(sub2.coins, coin);
      //  let trans = coin::split<Coin>(bal_from, amount, ctx);
        let c = coin::split(bal_from, amount, ctx);
        coin::join(bal_to, c)
    }

    fun parse_journal_by_symbol(journal: &Journal, symbol: String, start:u64, end:u64): u64{
        //parse ID from blockchain???
        0
    }
    fun parse_journal_by_addr(journal: &Journal, addr: String, start:u64, end:u64): u64{
        0
    }

    fun fresh_limit_coin(coin: String, journal: &Journal, volumelimit: &VolumeLimit):u64 {
       //// end = timestamp_now
       //// start = end - const_24H 
        let start = 0;
        let end = 86400;
        let limit = MAX_U64;
        if (vec_map::contains<String, u64>(volumelimit.volume_per_coin, coin)){
            let set_limit = vec_map::get<String, u64>(volumelimit.volume_per_coin, coin);
            let used_limit = parse_journal_by_symbol(journal, coin, start, end);
            let limit = *set_limit  - used_limit;
        };
        limit
    }

    fun fresh_limit_address(addr: string, journal: &Journal, volumelimit: &VolumeLimit):u64 {
       //// end = timestamp_now
       ///  start = end - const_1day
        let start = 0;
        let end = 86400;
        let limit = MAX_U64;
        if (vec_map::contains<String, u64>(box.limit.volume_per_address, addr)){
            let set_limit = vec_map::get<String, u64>(volumelimit.volume_per_address, addr);
            let used_limit = parse_journal_by_addr(journal, addr, start, end);
            let limit = *set_limit - used_limit;
        };  
        limit
    }

    public entry fun edit_limits_coin(box: &mut SubBox, coin: String,  amount: u64) {
        if (vec_map::contains<String, u64>(box.limit.volume_per_coin, coin)){
            *vec_map::get_mut<String, u64>(box.limit.volume_per_coin, coin) = amount;
        } else {
            vec_map::insert(box.limit.volume_per_coin, coin, amount);
        };
    }
    public entry fun edit_limits_address(box: &mut SubBox, addr: String,  amount: u64) {
        if (vec_map::contains<String, u64>(box.limit.volume_per_address, addr)){
            *vec_map::get_mut<String, u64>(box.limit.volume_per_address, addr) = amount;
        } else {
            vec_map::insert(box.limit.volume_per_address, addr, amount)
        }
    }

///////////////////////////////
//EXAMPLES
//withdraw(access_sub(&mut Box, 1), sui, address, amount)



}

